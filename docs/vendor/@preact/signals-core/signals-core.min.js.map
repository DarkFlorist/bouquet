{"version":3,"file":"signals-core.min.js","sources":["dependencies://dependencies/@preact/signals-core/src/index.ts"],"sourcesContent":["function cycleDetected(): never {\n\tthrow new Error(\"Cycle detected\");\n}\n\n// Flags for Computed and Effect.\nconst RUNNING = 1 << 0;\nconst NOTIFIED = 1 << 1;\nconst OUTDATED = 1 << 2;\nconst DISPOSED = 1 << 3;\nconst HAS_ERROR = 1 << 4;\nconst TRACKING = 1 << 5;\n\n// A linked list node used to track dependencies (sources) and dependents (targets).\n// Also used to remember the source's last version number that the target saw.\ntype Node = {\n\t// A source whose value the target depends on.\n\t_source: Signal;\n\t_prevSource?: Node;\n\t_nextSource?: Node;\n\n\t// A target that depends on the source and should be notified when the source changes.\n\t_target: Computed | Effect;\n\t_prevTarget?: Node;\n\t_nextTarget?: Node;\n\n\t// The version number of the source that target has last seen. We use version numbers\n\t// instead of storing the source value, because source values can take arbitrary amount\n\t// of memory, and computeds could hang on to them forever because they're lazily evaluated.\n\t// Use the special value -1 to mark potentially unused but recyclable nodes.\n\t_version: number;\n\n\t// Used to remember & roll back the source's previous `._node` value when entering &\n\t// exiting a new evaluation context.\n\t_rollbackNode?: Node;\n};\n\nfunction startBatch() {\n\tbatchDepth++;\n}\n\nfunction endBatch() {\n\tif (batchDepth > 1) {\n\t\tbatchDepth--;\n\t\treturn;\n\t}\n\n\tlet error: unknown;\n\tlet hasError = false;\n\n\twhile (batchedEffect !== undefined) {\n\t\tlet effect: Effect | undefined = batchedEffect;\n\t\tbatchedEffect = undefined;\n\n\t\tbatchIteration++;\n\n\t\twhile (effect !== undefined) {\n\t\t\tconst next: Effect | undefined = effect._nextBatchedEffect;\n\t\t\teffect._nextBatchedEffect = undefined;\n\t\t\teffect._flags &= ~NOTIFIED;\n\n\t\t\tif (!(effect._flags & DISPOSED) && needsToRecompute(effect)) {\n\t\t\t\ttry {\n\t\t\t\t\teffect._callback();\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (!hasError) {\n\t\t\t\t\t\terror = err;\n\t\t\t\t\t\thasError = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\teffect = next;\n\t\t}\n\t}\n\tbatchIteration = 0;\n\tbatchDepth--;\n\n\tif (hasError) {\n\t\tthrow error;\n\t}\n}\n\nfunction batch<T>(callback: () => T): T {\n\tif (batchDepth > 0) {\n\t\treturn callback();\n\t}\n\t/*@__INLINE__**/ startBatch();\n\ttry {\n\t\treturn callback();\n\t} finally {\n\t\tendBatch();\n\t}\n}\n\n// Currently evaluated computed or effect.\nlet evalContext: Computed | Effect | undefined = undefined;\n\n// Effects collected into a batch.\nlet batchedEffect: Effect | undefined = undefined;\nlet batchDepth = 0;\nlet batchIteration = 0;\n\n// A global version number for signals, used for fast-pathing repeated\n// computed.peek()/computed.value calls when nothing has changed globally.\nlet globalVersion = 0;\n\nfunction addDependency(signal: Signal): Node | undefined {\n\tif (evalContext === undefined) {\n\t\treturn undefined;\n\t}\n\n\tlet node = signal._node;\n\tif (node === undefined || node._target !== evalContext) {\n\t\t/**\n\t\t * `signal` is a new dependency. Create a new dependency node, and set it\n\t\t * as the tail of the current context's dependency list. e.g:\n\t\t *\n\t\t * { A <-> B       }\n\t\t *         ↑     ↑\n\t\t *        tail  node (new)\n\t\t *               ↓\n\t\t * { A <-> B <-> C }\n\t\t *               ↑\n\t\t *              tail (evalContext._sources)\n\t\t */\n\t\tnode = {\n\t\t\t_version: 0,\n\t\t\t_source: signal,\n\t\t\t_prevSource: evalContext._sources,\n\t\t\t_nextSource: undefined,\n\t\t\t_target: evalContext,\n\t\t\t_prevTarget: undefined,\n\t\t\t_nextTarget: undefined,\n\t\t\t_rollbackNode: node,\n\t\t};\n\n\t\tif (evalContext._sources !== undefined) {\n\t\t\tevalContext._sources._nextSource = node;\n\t\t}\n\t\tevalContext._sources = node;\n\t\tsignal._node = node;\n\n\t\t// Subscribe to change notifications from this dependency if we're in an effect\n\t\t// OR evaluating a computed signal that in turn has subscribers.\n\t\tif (evalContext._flags & TRACKING) {\n\t\t\tsignal._subscribe(node);\n\t\t}\n\t\treturn node;\n\t} else if (node._version === -1) {\n\t\t// `signal` is an existing dependency from a previous evaluation. Reuse it.\n\t\tnode._version = 0;\n\n\t\t/**\n\t\t * If `node` is not already the current tail of the dependency list (i.e.\n\t\t * there is a next node in the list), then make the `node` the new tail. e.g:\n\t\t *\n\t\t * { A <-> B <-> C <-> D }\n\t\t *         ↑           ↑\n\t\t *        node   ┌─── tail (evalContext._sources)\n\t\t *         └─────│─────┐\n\t\t *               ↓     ↓\n\t\t * { A <-> C <-> D <-> B }\n\t\t *                     ↑\n\t\t *                    tail (evalContext._sources)\n\t\t */\n\t\tif (node._nextSource !== undefined) {\n\t\t\tnode._nextSource._prevSource = node._prevSource;\n\n\t\t\tif (node._prevSource !== undefined) {\n\t\t\t\tnode._prevSource._nextSource = node._nextSource;\n\t\t\t}\n\n\t\t\tnode._prevSource = evalContext._sources;\n\t\t\tnode._nextSource = undefined;\n\n\t\t\tevalContext._sources!._nextSource = node;\n\t\t\tevalContext._sources = node;\n\t\t}\n\n\t\t// We can assume that the currently evaluated effect / computed signal is already\n\t\t// subscribed to change notifications from `signal` if needed.\n\t\treturn node;\n\t}\n\treturn undefined;\n}\n\ndeclare class Signal<T = any> {\n\t/** @internal */\n\t_value: unknown;\n\n\t/**\n\t * @internal\n\t * Version numbers should always be >= 0, because the special value -1 is used\n\t * by Nodes to signify potentially unused but recyclable nodes.\n\t */\n\t_version: number;\n\n\t/** @internal */\n\t_node?: Node;\n\n\t/** @internal */\n\t_targets?: Node;\n\n\tconstructor(value?: T);\n\n\t/** @internal */\n\t_refresh(): boolean;\n\n\t/** @internal */\n\t_subscribe(node: Node): void;\n\n\t/** @internal */\n\t_unsubscribe(node: Node): void;\n\n\tsubscribe(fn: (value: T) => void): () => void;\n\n\tvalueOf(): T;\n\n\ttoString(): string;\n\n\tpeek(): T;\n\n\tget value(): T;\n\tset value(value: T);\n}\n\n/** @internal */\nfunction Signal(this: Signal, value?: unknown) {\n\tthis._value = value;\n\tthis._version = 0;\n\tthis._node = undefined;\n\tthis._targets = undefined;\n}\n\nSignal.prototype._refresh = function () {\n\treturn true;\n};\n\nSignal.prototype._subscribe = function (node) {\n\tif (this._targets !== node && node._prevTarget === undefined) {\n\t\tnode._nextTarget = this._targets;\n\t\tif (this._targets !== undefined) {\n\t\t\tthis._targets._prevTarget = node;\n\t\t}\n\t\tthis._targets = node;\n\t}\n};\n\nSignal.prototype._unsubscribe = function (node) {\n\t// Only run the unsubscribe step if the signal has any subscribers to begin with.\n\tif (this._targets !== undefined) {\n\t\tconst prev = node._prevTarget;\n\t\tconst next = node._nextTarget;\n\t\tif (prev !== undefined) {\n\t\t\tprev._nextTarget = next;\n\t\t\tnode._prevTarget = undefined;\n\t\t}\n\t\tif (next !== undefined) {\n\t\t\tnext._prevTarget = prev;\n\t\t\tnode._nextTarget = undefined;\n\t\t}\n\t\tif (node === this._targets) {\n\t\t\tthis._targets = next;\n\t\t}\n\t}\n};\n\nSignal.prototype.subscribe = function (fn) {\n\tconst signal = this;\n\treturn effect(function (this: Effect) {\n\t\tconst value = signal.value;\n\t\tconst flag = this._flags & TRACKING;\n\t\tthis._flags &= ~TRACKING;\n\t\ttry {\n\t\t\tfn(value);\n\t\t} finally {\n\t\t\tthis._flags |= flag;\n\t\t}\n\t});\n};\n\nSignal.prototype.valueOf = function () {\n\treturn this.value;\n};\n\nSignal.prototype.toString = function () {\n\treturn this.value + \"\";\n};\n\nSignal.prototype.peek = function () {\n\treturn this._value;\n};\n\nObject.defineProperty(Signal.prototype, \"value\", {\n\tget() {\n\t\tconst node = addDependency(this);\n\t\tif (node !== undefined) {\n\t\t\tnode._version = this._version;\n\t\t}\n\t\treturn this._value;\n\t},\n\tset(value) {\n\t\tif (value !== this._value) {\n\t\t\tif (batchIteration > 100) {\n\t\t\t\tcycleDetected();\n\t\t\t}\n\n\t\t\tthis._value = value;\n\t\t\tthis._version++;\n\t\t\tglobalVersion++;\n\n\t\t\t/**@__INLINE__*/ startBatch();\n\t\t\ttry {\n\t\t\t\tfor (\n\t\t\t\t\tlet node = this._targets;\n\t\t\t\t\tnode !== undefined;\n\t\t\t\t\tnode = node._nextTarget\n\t\t\t\t) {\n\t\t\t\t\tnode._target._notify();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tendBatch();\n\t\t\t}\n\t\t}\n\t},\n});\n\nfunction signal<T>(value: T): Signal<T> {\n\treturn new Signal(value);\n}\n\nfunction needsToRecompute(target: Computed | Effect): boolean {\n\t// Check the dependencies for changed values. The dependency list is already\n\t// in order of use. Therefore if multiple dependencies have changed values, only\n\t// the first used dependency is re-evaluated at this point.\n\tfor (\n\t\tlet node = target._sources;\n\t\tnode !== undefined;\n\t\tnode = node._nextSource\n\t) {\n\t\t// If there's a new version of the dependency before or after refreshing,\n\t\t// or the dependency has something blocking it from refreshing at all (e.g. a\n\t\t// dependency cycle), then we need to recompute.\n\t\tif (\n\t\t\tnode._source._version !== node._version ||\n\t\t\t!node._source._refresh() ||\n\t\t\tnode._source._version !== node._version\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t}\n\t// If none of the dependencies have changed values since last recompute then\n\t// there's no need to recompute.\n\treturn false;\n}\n\nfunction prepareSources(target: Computed | Effect) {\n\t/**\n\t * 1. Mark all current sources as re-usable nodes (version: -1)\n\t * 2. Set a rollback node if the current node is being used in a different context\n\t * 3. Point 'target._sources' to the tail of the doubly-linked list, e.g:\n\t *\n\t *    { undefined <- A <-> B <-> C -> undefined }\n\t *                   ↑           ↑\n\t *                   │           └──────┐\n\t * target._sources = A; (node is head)  │\n\t *                   ↓                  │\n\t * target._sources = C; (node is tail) ─┘\n\t */\n\tfor (\n\t\tlet node = target._sources;\n\t\tnode !== undefined;\n\t\tnode = node._nextSource\n\t) {\n\t\tconst rollbackNode = node._source._node;\n\t\tif (rollbackNode !== undefined) {\n\t\t\tnode._rollbackNode = rollbackNode;\n\t\t}\n\t\tnode._source._node = node;\n\t\tnode._version = -1;\n\n\t\tif (node._nextSource === undefined) {\n\t\t\ttarget._sources = node;\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nfunction cleanupSources(target: Computed | Effect) {\n\tlet node = target._sources;\n\tlet head = undefined;\n\n\t/**\n\t * At this point 'target._sources' points to the tail of the doubly-linked list.\n\t * It contains all existing sources + new sources in order of use.\n\t * Iterate backwards until we find the head node while dropping old dependencies.\n\t */\n\twhile (node !== undefined) {\n\t\tconst prev = node._prevSource;\n\n\t\t/**\n\t\t * The node was not re-used, unsubscribe from its change notifications and remove itself\n\t\t * from the doubly-linked list. e.g:\n\t\t *\n\t\t * { A <-> B <-> C }\n\t\t *         ↓\n\t\t *    { A <-> C }\n\t\t */\n\t\tif (node._version === -1) {\n\t\t\tnode._source._unsubscribe(node);\n\n\t\t\tif (prev !== undefined) {\n\t\t\t\tprev._nextSource = node._nextSource;\n\t\t\t}\n\t\t\tif (node._nextSource !== undefined) {\n\t\t\t\tnode._nextSource._prevSource = prev;\n\t\t\t}\n\t\t} else {\n\t\t\t/**\n\t\t\t * The new head is the last node seen which wasn't removed/unsubscribed\n\t\t\t * from the doubly-linked list. e.g:\n\t\t\t *\n\t\t\t * { A <-> B <-> C }\n\t\t\t *   ↑     ↑     ↑\n\t\t\t *   │     │     └ head = node\n\t\t\t *   │     └ head = node\n\t\t\t *   └ head = node\n\t\t\t */\n\t\t\thead = node;\n\t\t}\n\n\t\tnode._source._node = node._rollbackNode;\n\t\tif (node._rollbackNode !== undefined) {\n\t\t\tnode._rollbackNode = undefined;\n\t\t}\n\n\t\tnode = prev;\n\t}\n\n\ttarget._sources = head;\n}\n\ndeclare class Computed<T = any> extends Signal<T> {\n\t_compute: () => T;\n\t_sources?: Node;\n\t_globalVersion: number;\n\t_flags: number;\n\n\tconstructor(compute: () => T);\n\n\t_notify(): void;\n\tget value(): T;\n}\n\nfunction Computed(this: Computed, compute: () => unknown) {\n\tSignal.call(this, undefined);\n\n\tthis._compute = compute;\n\tthis._sources = undefined;\n\tthis._globalVersion = globalVersion - 1;\n\tthis._flags = OUTDATED;\n}\n\nComputed.prototype = new Signal() as Computed;\n\nComputed.prototype._refresh = function () {\n\tthis._flags &= ~NOTIFIED;\n\n\tif (this._flags & RUNNING) {\n\t\treturn false;\n\t}\n\n\t// If this computed signal has subscribed to updates from its dependencies\n\t// (TRACKING flag set) and none of them have notified about changes (OUTDATED\n\t// flag not set), then the computed value can't have changed.\n\tif ((this._flags & (OUTDATED | TRACKING)) === TRACKING) {\n\t\treturn true;\n\t}\n\tthis._flags &= ~OUTDATED;\n\n\tif (this._globalVersion === globalVersion) {\n\t\treturn true;\n\t}\n\tthis._globalVersion = globalVersion;\n\n\t// Mark this computed signal running before checking the dependencies for value\n\t// changes, so that the RUNNING flag can be used to notice cyclical dependencies.\n\tthis._flags |= RUNNING;\n\tif (this._version > 0 && !needsToRecompute(this)) {\n\t\tthis._flags &= ~RUNNING;\n\t\treturn true;\n\t}\n\n\tconst prevContext = evalContext;\n\ttry {\n\t\tprepareSources(this);\n\t\tevalContext = this;\n\t\tconst value = this._compute();\n\t\tif (\n\t\t\tthis._flags & HAS_ERROR ||\n\t\t\tthis._value !== value ||\n\t\t\tthis._version === 0\n\t\t) {\n\t\t\tthis._value = value;\n\t\t\tthis._flags &= ~HAS_ERROR;\n\t\t\tthis._version++;\n\t\t}\n\t} catch (err) {\n\t\tthis._value = err;\n\t\tthis._flags |= HAS_ERROR;\n\t\tthis._version++;\n\t}\n\tevalContext = prevContext;\n\tcleanupSources(this);\n\tthis._flags &= ~RUNNING;\n\treturn true;\n};\n\nComputed.prototype._subscribe = function (node) {\n\tif (this._targets === undefined) {\n\t\tthis._flags |= OUTDATED | TRACKING;\n\n\t\t// A computed signal subscribes lazily to its dependencies when the it\n\t\t// gets its first subscriber.\n\t\tfor (\n\t\t\tlet node = this._sources;\n\t\t\tnode !== undefined;\n\t\t\tnode = node._nextSource\n\t\t) {\n\t\t\tnode._source._subscribe(node);\n\t\t}\n\t}\n\tSignal.prototype._subscribe.call(this, node);\n};\n\nComputed.prototype._unsubscribe = function (node) {\n\t// Only run the unsubscribe step if the computed signal has any subscribers.\n\tif (this._targets !== undefined) {\n\t\tSignal.prototype._unsubscribe.call(this, node);\n\n\t\t// Computed signal unsubscribes from its dependencies when it loses its last subscriber.\n\t\t// This makes it possible for unreferences subgraphs of computed signals to get garbage collected.\n\t\tif (this._targets === undefined) {\n\t\t\tthis._flags &= ~TRACKING;\n\n\t\t\tfor (\n\t\t\t\tlet node = this._sources;\n\t\t\t\tnode !== undefined;\n\t\t\t\tnode = node._nextSource\n\t\t\t) {\n\t\t\t\tnode._source._unsubscribe(node);\n\t\t\t}\n\t\t}\n\t}\n};\n\nComputed.prototype._notify = function () {\n\tif (!(this._flags & NOTIFIED)) {\n\t\tthis._flags |= OUTDATED | NOTIFIED;\n\n\t\tfor (\n\t\t\tlet node = this._targets;\n\t\t\tnode !== undefined;\n\t\t\tnode = node._nextTarget\n\t\t) {\n\t\t\tnode._target._notify();\n\t\t}\n\t}\n};\n\nComputed.prototype.peek = function () {\n\tif (!this._refresh()) {\n\t\tcycleDetected();\n\t}\n\tif (this._flags & HAS_ERROR) {\n\t\tthrow this._value;\n\t}\n\treturn this._value;\n};\n\nObject.defineProperty(Computed.prototype, \"value\", {\n\tget() {\n\t\tif (this._flags & RUNNING) {\n\t\t\tcycleDetected();\n\t\t}\n\t\tconst node = addDependency(this);\n\t\tthis._refresh();\n\t\tif (node !== undefined) {\n\t\t\tnode._version = this._version;\n\t\t}\n\t\tif (this._flags & HAS_ERROR) {\n\t\t\tthrow this._value;\n\t\t}\n\t\treturn this._value;\n\t},\n});\n\ninterface ReadonlySignal<T = any> extends Signal<T> {\n\treadonly value: T;\n}\n\nfunction computed<T>(compute: () => T): ReadonlySignal<T> {\n\treturn new Computed(compute);\n}\n\nfunction cleanupEffect(effect: Effect) {\n\tconst cleanup = effect._cleanup;\n\teffect._cleanup = undefined;\n\n\tif (typeof cleanup === \"function\") {\n\t\t/*@__INLINE__**/ startBatch();\n\n\t\t// Run cleanup functions always outside of any context.\n\t\tconst prevContext = evalContext;\n\t\tevalContext = undefined;\n\t\ttry {\n\t\t\tcleanup();\n\t\t} catch (err) {\n\t\t\teffect._flags &= ~RUNNING;\n\t\t\teffect._flags |= DISPOSED;\n\t\t\tdisposeEffect(effect);\n\t\t\tthrow err;\n\t\t} finally {\n\t\t\tevalContext = prevContext;\n\t\t\tendBatch();\n\t\t}\n\t}\n}\n\nfunction disposeEffect(effect: Effect) {\n\tfor (\n\t\tlet node = effect._sources;\n\t\tnode !== undefined;\n\t\tnode = node._nextSource\n\t) {\n\t\tnode._source._unsubscribe(node);\n\t}\n\teffect._compute = undefined;\n\teffect._sources = undefined;\n\n\tcleanupEffect(effect);\n}\n\nfunction endEffect(this: Effect, prevContext?: Computed | Effect) {\n\tif (evalContext !== this) {\n\t\tthrow new Error(\"Out-of-order effect\");\n\t}\n\tcleanupSources(this);\n\tevalContext = prevContext;\n\n\tthis._flags &= ~RUNNING;\n\tif (this._flags & DISPOSED) {\n\t\tdisposeEffect(this);\n\t}\n\tendBatch();\n}\n\ndeclare class Effect {\n\t_compute?: () => unknown;\n\t_cleanup?: unknown;\n\t_sources?: Node;\n\t_nextBatchedEffect?: Effect;\n\t_flags: number;\n\n\tconstructor(compute: () => void);\n\n\t_callback(): void;\n\t_start(): () => void;\n\t_notify(): void;\n\t_dispose(): void;\n}\n\nfunction Effect(this: Effect, compute: () => void) {\n\tthis._compute = compute;\n\tthis._cleanup = undefined;\n\tthis._sources = undefined;\n\tthis._nextBatchedEffect = undefined;\n\tthis._flags = TRACKING;\n}\n\nEffect.prototype._callback = function () {\n\tconst finish = this._start();\n\ttry {\n\t\tif (!(this._flags & DISPOSED) && this._compute !== undefined) {\n\t\t\tthis._cleanup = this._compute();\n\t\t}\n\t} finally {\n\t\tfinish();\n\t}\n};\n\nEffect.prototype._start = function () {\n\tif (this._flags & RUNNING) {\n\t\tcycleDetected();\n\t}\n\tthis._flags |= RUNNING;\n\tthis._flags &= ~DISPOSED;\n\tcleanupEffect(this);\n\tprepareSources(this);\n\n\t/*@__INLINE__**/ startBatch();\n\tconst prevContext = evalContext;\n\tevalContext = this;\n\treturn endEffect.bind(this, prevContext);\n};\n\nEffect.prototype._notify = function () {\n\tif (!(this._flags & NOTIFIED)) {\n\t\tthis._flags |= NOTIFIED;\n\t\tthis._nextBatchedEffect = batchedEffect;\n\t\tbatchedEffect = this;\n\t}\n};\n\nEffect.prototype._dispose = function () {\n\tthis._flags |= DISPOSED;\n\n\tif (!(this._flags & RUNNING)) {\n\t\tdisposeEffect(this);\n\t}\n};\n\nfunction effect(compute: () => unknown): () => void {\n\tconst effect = new Effect(compute);\n\ttry {\n\t\teffect._callback();\n\t} catch (err) {\n\t\teffect._dispose();\n\t\tthrow err;\n\t}\n\t// Return a bound function instead of a wrapper like `() => effect._dispose()`,\n\t// because bound functions seem to be just as fast and take up a lot less memory.\n\treturn effect._dispose.bind(effect);\n}\n\nexport { signal, computed, effect, batch, Signal, ReadonlySignal };\n"],"names":["g","f","exports","module","define","amd","globalThis","self","preactSignalsCore","this","cycleDetected","Error","endBatch","batchDepth","error","hasError","undefined","batchedEffect","_effect","batchIteration","effect","next","_nextBatchedEffect","_flags","needsToRecompute","_callback","err","evalContext","globalVersion","addDependency","signal","node","_node","_target","_version","_source","_prevSource","_sources","_nextSource","_prevTarget","_nextTarget","_rollbackNode","_subscribe","Signal","value","_value","_targets","prototype","_refresh","_unsubscribe","prev","subscribe","fn","flag","valueOf","toString","peek","Object","defineProperty","get","set","_notify","target","prepareSources","rollbackNode","cleanupSources","head","Computed","compute","call","_compute","_globalVersion","prevContext","OUTDATED","cleanupEffect","cleanup","_cleanup","disposeEffect","endEffect","Effect","finish","_start","bind","_dispose","batch","callback","computed"],"mappings":"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"}