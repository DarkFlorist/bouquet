{"version":3,"file":"stores.js","sourceRoot":"","sources":["../ts/stores.ts"],"names":[],"mappings":"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","sourcesContent":["import { useComputed, useSignal } from '@preact/signals'\nimport { Wallet } from 'ethers'\nimport { DEFAULT_NETWORKS, getNetwork } from './constants.js'\nimport { getMaxBaseFeeInFutureBlock } from './library/bundleUtils.js'\nimport { EthereumAddress } from './types/ethereumTypes.js'\nimport { ProviderStore } from './library/provider.js'\nimport { BlockInfo, Bundle, Signers } from './types/types.js'\nimport { BouquetSettings, TransactionList } from './types/bouquetTypes.js'\nimport { addressString } from './library/utils.js'\n\nfunction fetchBurnerWalletFromStorage(): Wallet {\n\tconst burnerPrivateKey = localStorage.getItem('wallet')\n\ttry {\n\t\treturn burnerPrivateKey ? new Wallet(burnerPrivateKey) : new Wallet(Wallet.createRandom().privateKey)\n\t} catch {\n\t\treturn new Wallet(Wallet.createRandom().privateKey)\n\t}\n}\n\nfunction fetchBundleFromStorage(): Bundle | undefined {\n\tconst payload = JSON.parse(localStorage.getItem('payload') ?? 'null')\n\tif (!payload) return undefined\n\tconst tryParse = TransactionList.safeParse(payload)\n\tif (!tryParse.success) {\n\t\tlocalStorage.removeItem('payload')\n\t\treturn undefined\n\t}\n\tconst parsed = tryParse.value\n\n\tconst uniqueToAddresses = [...new Set(parsed.map(({ from }) => from))]\n\tconst containsFundingTx = uniqueToAddresses.includes('FUNDING')\n\tconst uniqueSigners = uniqueToAddresses.filter((address): address is EthereumAddress => address !== 'FUNDING').map(address => addressString(address))\n\n\tconst totalGas = parsed.reduce((sum, tx) => tx.gasLimit + sum, 0n)\n\tconst inputValue = parsed.reduce((sum, tx) => tx.from === 'FUNDING' ? tx.value + sum : sum, 0n)\n\n\treturn { transactions: parsed, containsFundingTx, uniqueSigners, totalGas, inputValue }\n}\n\nexport function fetchSettingsFromStorage() {\n\tconst nonParsed = localStorage.getItem('bouquetSettings')\n\tif (nonParsed === null) return DEFAULT_NETWORKS\n\tconst settings = BouquetSettings.safeParse(JSON.parse(nonParsed))\n\tif (!settings.success) return DEFAULT_NETWORKS\n\treturn settings.value\n}\n\nexport function createGlobalState() {\n\tconst bouquetSettings = useSignal<BouquetSettings>(fetchSettingsFromStorage())\n\tconst provider = useSignal<ProviderStore | undefined>(undefined)\n\tconst blockInfo = useSignal<BlockInfo>({ blockNumber: 0n, baseFee: 0n, priorityFee: 10n ** 9n * 3n })\n\tconst signers = useSignal<Signers>({ burner: fetchBurnerWalletFromStorage(), burnerBalance: 0n, bundleSigners: {} })\n\tconst bundle = useSignal<Bundle | undefined>(fetchBundleFromStorage())\n\n\t// Sync burnerWallet to localStorage\n\tsigners.subscribe(({ burner }) => {\n\t\tif (burner) localStorage.setItem('wallet', burner.privateKey)\n\t\telse localStorage.removeItem('wallet')\n\t})\n\t\n\tconst fundingAmountMin = useComputed(() => {\n\t\tif (!bundle.value) return 0n\n\t\tif (!bundle.value.containsFundingTx) return 0n\n\t\tconst network = getNetwork(bouquetSettings.value, provider.value?.chainId || 1n)\n\t\tconst maxBaseFee = getMaxBaseFeeInFutureBlock(blockInfo.value.baseFee, network.blocksInFuture)\n\t\treturn bundle.value.totalGas * (blockInfo.value.priorityFee + maxBaseFee) + bundle.value.inputValue\n\t})\n\n\treturn { provider, blockInfo, bundle, bouquetSettings, signers, fundingAmountMin }\n}\n"]}