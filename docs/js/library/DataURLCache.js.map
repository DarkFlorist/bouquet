{"version":3,"file":"DataURLCache.js","sourceRoot":"","sources":["../../ts/library/DataURLCache.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,GAAG,GAAG,CAAA;AAEtB,MAAM,OAAO,YAAY;IAAzB;QACkB,aAAQ,GAAG,IAAI,GAAG,EAAkB,CAAA;QAC9C,QAAG,GAAG,CAAC,GAAW,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;QAC7C,QAAG,GAAG,CAAC,GAAW,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;QAC7C,QAAG,GAAG,CAAC,KAAa,EAAE,GAAW,EAAE,EAAE;YAC3C,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,UAAU;gBAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAA;YAC5F,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;YAC7B,OAAO,KAAK,CAAA;QACb,CAAC,CAAA;IACF,CAAC;CAAA","sourcesContent":["const CACHE_SIZE = 100\n\nexport class DataURLCache {\n\tprivate readonly dataURLs = new Map<string, string>()\n\tpublic has = (key: string) => this.dataURLs.has(key)\n\tpublic get = (key: string) => this.dataURLs.get(key)\n\tpublic set = (image: string, key: string) => {\n\t\tif (this.dataURLs.size > CACHE_SIZE) this.dataURLs.delete(this.dataURLs.keys().next().value)\n\t\tthis.dataURLs.set(key, image)\n\t\treturn image\n\t}\n}\n"]}