{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../ts/library/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,QAAQ,CAAA;AACnC,OAAO,EAAE,eAAe,EAAE,MAAM,2BAA2B,CAAA;AAC3D,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAA;AAE7C,MAAM,UAAU,aAAa,CAAC,OAAe;IAC5C,OAAO,UAAU,CAAC,SAAS,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC,CAAA;AACvD,CAAC;AAED,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC,IAAY,EAAE,KAAa,EAAE,EAAE,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAA;AAE/E,SAAS,kBAAkB,CAAC,KAAa,EAAE,aAAqB;IAC/D,IAAI,OAAO,KAAK,KAAK,QAAQ;QAAE,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAA;IACpD,IAAI,KAAK,IAAI,EAAE,IAAI,MAAM,CAAC,aAAa,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,EAAE;QAAE,MAAM,IAAI,KAAK,CAAC,cAAe,KAAM,WAAY,aAAc,yBAAyB,CAAC,CAAA;IACrJ,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,aAAa,CAAC,CAAA;IAC5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;QACxC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,KAAK,IAAI,MAAM,CAAC,aAAa,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,CAAA;IAC1E,CAAC;IACD,OAAO,MAAM,CAAA;AACd,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAC,IAAY;IACjD,MAAM,UAAU,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAA;IACxC,IAAI,UAAU,KAAK,CAAC;QAAE,OAAO,IAAI,UAAU,EAAE,CAAA;IAC7C,OAAO,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,CAAA;AACpD,CAAC","sourcesContent":["import { getAddress } from 'ethers'\nimport { EthereumAddress } from '../types/ethereumTypes.js'\nimport { serialize } from '../types/types.js'\n\nexport function addressString(address: bigint): string {\n\treturn getAddress(serialize(EthereumAddress, address))\n}\n\nexport const min = (left: bigint, right: bigint) => left < right ? left : right\n\nfunction bigintToUint8Array(value: bigint, numberOfBytes: number) {\n\tif (typeof value === 'number') value = BigInt(value)\n\tif (value >= 2n ** BigInt(numberOfBytes * 8) || value < 0n) throw new Error(`Cannot fit ${ value } into a ${ numberOfBytes }-byte unsigned integer.`)\n\tconst result = new Uint8Array(numberOfBytes)\n\tfor (let i = 0; i < result.length; ++i) {\n\t\tresult[i] = Number((value >> BigInt(numberOfBytes - i - 1) * 8n) & 0xffn)\n\t}\n\treturn result\n}\n\nexport function hexStringToUint8Array(data: string) {\n\tconst dataLength = (data.length - 2) / 2\n\tif (dataLength === 0) return new Uint8Array()\n\treturn bigintToUint8Array(BigInt(data), dataLength)\n}\n"]}