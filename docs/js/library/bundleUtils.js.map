{"version":3,"file":"bundleUtils.js","sourceRoot":"","sources":["../../ts/library/bundleUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { BrowserProvider, getAddress, Signer, TransactionRequest } from 'ethers'\nimport { BlockInfo, Bundle, serialize, Signers } from '../types/types.js'\nimport { EthereumData } from '../types/ethereumTypes.js'\nimport { addressString } from './utils.js'\n\nexport interface FlashbotsBundleTransaction {\n\ttransaction: TransactionRequest\n\tsigner: Signer\n}\n\nexport const getMaxBaseFeeInFutureBlock = (baseFee: bigint, blocksInFuture: bigint) => {\n\tif (blocksInFuture <= 0n) throw new Error('blocksInFuture needs to be positive')\n\treturn [...Array(blocksInFuture)].reduce((accumulator, _currentValue) => (accumulator * 1125n) / 1000n, baseFee) + 1n\n}\n\nasync function getSimulatedCountsOnNetwork(provider: BrowserProvider): Promise<{ [address: string]: number }> {\n\ttry {\n\t\tconst { payload } = await provider.send(\n\t\t\t'interceptor_getSimulationStack',\n\t\t\t['1.0.0']\n\t\t)\n\t\tconst result = payload.reduce((acc: { [address: string]: number }, curr: { from: string }) => {\n\t\t\tcurr.from = getAddress(curr.from)\n\t\t\tif (curr.from in acc) acc[curr.from] += 1\n\t\t\telse acc[curr.from] = 1\n\t\t\treturn acc\n\t\t}, {})\n\t\treturn result\n\t} catch (error) {\n\t\tconsole.error('getSimulatedCountsOnNetwork error: ', error)\n\t\treturn {}\n\t}\n}\n\nexport const getRawTransactionsAndCalculateFeesAndNonces = async (bundle: FlashbotsBundleTransaction[], provider: BrowserProvider, blockInfo: BlockInfo, maxBaseFee: bigint) => {\n\tconst transactions: { rawTransaction: string, transaction: TransactionRequest } [] = []\n\tconst inSimulation = await getSimulatedCountsOnNetwork(provider)\n\tconst accNonces: { [address: string]: number } = {}\n\tfor (const tx of bundle) {\n\t\ttx.transaction.maxPriorityFeePerGas = blockInfo.priorityFee\n\t\ttx.transaction.maxFeePerGas = blockInfo.priorityFee + maxBaseFee\n\t\tif (!tx.transaction.from) throw new Error('BundleTransaction missing from address')\n\t\tif (!tx.transaction.chainId) throw new Error('BundleTransaction missing chainId')\n\t\t// Fetch and increment nonces from network, reduce the fetch amount by amount of transactions made on the simulation stack\n\t\tif (tx.transaction.from.toString() in accNonces) {\n\t\t\taccNonces[tx.transaction.from.toString()] += 1\n\t\t} else {\n\t\t\taccNonces[tx.transaction.from.toString()] = await provider.getTransactionCount(tx.transaction.from, 'latest')\n\t\t\tif (tx.transaction.from.toString() in inSimulation) accNonces[tx.transaction.from.toString()] -= inSimulation[tx.transaction.from.toString()]\n\t\t}\n\t\ttx.transaction.nonce = accNonces[tx.transaction.from.toString()]\n\t\tconst rawTransaction = await tx.signer.signTransaction({ ...tx.transaction })\n\t\ttransactions.push({ rawTransaction, transaction: tx.transaction })\n\t}\n\treturn transactions\n}\n\nexport const createBundleTransactions = (\n\tbundle: Bundle,\n\tsigners: Signers,\n\tblockInfo: BlockInfo,\n\tblocksInFuture: bigint,\n\tfundingAmountMin: bigint,\n): FlashbotsBundleTransaction[] => {\n\treturn bundle.transactions.map(({ from, to, gasLimit, value, input, chainId }) => {\n\t\tconst gasOpts = {\n\t\t\tmaxPriorityFeePerGas: blockInfo.priorityFee,\n\t\t\ttype: 2,\n\t\t\tmaxFeePerGas: blockInfo.priorityFee + getMaxBaseFeeInFutureBlock(blockInfo.baseFee, blocksInFuture),\n\t\t}\n\t\tif (from === 'FUNDING') {\n\t\t\tif (!signers.burner) throw new Error('No burner wallet provided')\n\t\t\treturn {\n\t\t\t\tsigner: signers.burner,\n\t\t\t\ttransaction: {\n\t\t\t\t\tfrom: signers.burner.address,\n\t\t\t\t\t...(bundle && bundle.transactions[0].to\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\tto: addressString(bundle.transactions[0].to),\n\t\t\t\t\t\t}\n\t\t\t\t\t\t: {}),\n\t\t\t\t\tvalue: fundingAmountMin - 21000n * (getMaxBaseFeeInFutureBlock(blockInfo.baseFee, blocksInFuture) + blockInfo.priorityFee),\n\t\t\t\t\tdata: '0x',\n\t\t\t\t\tgasLimit: 21000n,\n\t\t\t\t\tchainId: Number(chainId),\n\t\t\t\t\t...gasOpts,\n\t\t\t\t},\n\t\t\t}\n\t\t} else\n\t\t\treturn {\n\t\t\t\tsigner: signers.bundleSigners[addressString(from)],\n\t\t\t\ttransaction: {\n\t\t\t\t\tfrom: addressString(from),\n\t\t\t\t\t...(to ? { to: addressString(to) } : {}),\n\t\t\t\t\tgasLimit,\n\t\t\t\t\tdata: serialize(EthereumData, input),\n\t\t\t\t\tvalue,\n\t\t\t\t\tchainId: Number(chainId),\n\t\t\t\t\t...gasOpts,\n\t\t\t\t},\n\t\t\t}\n\t})\n}\n"]}