{"version":3,"file":"interceptorTypes.js","sourceRoot":"","sources":["../../ts/types/interceptorTypes.ts"],"names":[],"mappings":"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","sourcesContent":["import * as t from 'funtypes'\nimport { EthereumAddress, EthereumQuantity, EthereumData, EthereumBytes32, LiteralConverterParserFactory, EthereumInput, BytesParser } from './ethereumTypes.js'\n\nconst EthereumAccessList = t.ReadonlyArray(\n\tt\n\t\t.Object({\n\t\t\taddress: EthereumAddress,\n\t\t\tstorageKeys: t.ReadonlyArray(EthereumBytes32),\n\t\t})\n\t\t.asReadonly(),\n)\ntype EthereumAccessList = t.Static<typeof EthereumAccessList>\n\ntype EthereumUnsignedTransactionLegacy = t.Static<typeof EthereumUnsignedTransactionLegacy>\nconst EthereumUnsignedTransactionLegacy = t.Intersect(\n\tt.Object({\n\t\ttype: t.Union(\n\t\t\tt.Literal('0x0').withParser(LiteralConverterParserFactory('0x0', 'legacy' as const)),\n\t\t\tt.Literal(undefined).withParser(LiteralConverterParserFactory(undefined, 'legacy' as const)),\n\t\t),\n\t\tfrom: EthereumAddress,\n\t\tnonce: EthereumQuantity,\n\t\tgasPrice: EthereumQuantity,\n\t\tgas: EthereumQuantity,\n\t\tto: t.Union(EthereumAddress, t.Null),\n\t\tvalue: EthereumQuantity,\n\t\tinput: EthereumInput,\n\t}).asReadonly(),\n\tt.Partial({\n\t\tchainId: EthereumQuantity,\n\t}).asReadonly()\n)\n\ntype EthereumUnsignedTransaction2930 = t.Static<typeof EthereumUnsignedTransaction2930>\nconst EthereumUnsignedTransaction2930 = t.Intersect(\n\tt.Object({\n\t\ttype: t.Literal('0x1').withParser(LiteralConverterParserFactory('0x1', '2930' as const)),\n\t\tfrom: EthereumAddress,\n\t\tnonce: EthereumQuantity,\n\t\tgasPrice: EthereumQuantity,\n\t\tgas: EthereumQuantity,\n\t\tto: t.Union(EthereumAddress, t.Null),\n\t\tvalue: EthereumQuantity,\n\t\tinput: EthereumInput,\n\t\tchainId: EthereumQuantity,\n\t}).asReadonly(),\n\tt.Partial({\n\t\taccessList: EthereumAccessList,\n\t})\n)\n\ntype EthereumUnsignedTransaction1559 = t.Static<typeof EthereumUnsignedTransaction1559>\nconst EthereumUnsignedTransaction1559 = t.Intersect(\n\tt.Object({\n\t\ttype: t.Literal('0x2').withParser(LiteralConverterParserFactory('0x2', '1559' as const)),\n\t\tfrom: EthereumAddress,\n\t\tnonce: EthereumQuantity,\n\t\tmaxFeePerGas: EthereumQuantity,\n\t\tmaxPriorityFeePerGas: EthereumQuantity,\n\t\tgas: EthereumQuantity,\n\t\tto: t.Union(EthereumAddress, t.Null),\n\t\tvalue: EthereumQuantity,\n\t\tinput: EthereumInput,\n\t\tchainId: EthereumQuantity,\n\t}).asReadonly(),\n\tt.Partial({\n\t\taccessList: EthereumAccessList,\n\t})\n)\ntype EthereumUnsignedTransaction = t.Static<typeof EthereumUnsignedTransaction>\nconst EthereumUnsignedTransaction = t.Union(EthereumUnsignedTransactionLegacy, EthereumUnsignedTransaction2930, EthereumUnsignedTransaction1559)\n\nconst RevertErrorParser: t.ParsedValue<t.String, string>['config'] = {\n\tparse: (value) => {\n\t\tif (!value.startsWith('Reverted ')) return { success: true, value }\n\t\tconst parseResult = BytesParser.parse(value.slice('Reverted '.length))\n\t\tif (!parseResult.success) return parseResult\n\t\tconst decoded = new TextDecoder().decode(parseResult.value)\n\t\treturn { success: true, value: decoded }\n\t},\n\tserialize: (value) => {\n\t\tconst encoded = new TextEncoder().encode(value)\n\t\tconst serializationResult = BytesParser.serialize!(encoded)\n\t\tif (!serializationResult.success) return serializationResult\n\t\treturn { success: true, value: `Reverted ${serializationResult.value}` }\n\t}\n}\n\ntype MulticallResponseEventLog = t.Static<typeof MulticallResponseEventLog>\nconst MulticallResponseEventLog = t.Object({\n\tloggersAddress: EthereumAddress,\n\tdata: EthereumInput,\n\ttopics: t.ReadonlyArray(EthereumBytes32),\n}).asReadonly()\n\ntype MulticallResponseEventLogs = t.Static<typeof MulticallResponseEventLogs>\nconst MulticallResponseEventLogs = t.ReadonlyArray(MulticallResponseEventLog)\n\ntype EthBalanceChanges = t.Static<typeof EthBalanceChanges>\nconst EthBalanceChanges = t.ReadonlyArray(\n\tt.Object({\n\t\taddress: EthereumAddress,\n\t\tbefore: EthereumQuantity,\n\t\tafter: EthereumQuantity,\n\t}).asReadonly()\n)\n\ntype SingleMulticallResponse = t.Static<typeof SingleMulticallResponse>\nconst SingleMulticallResponse = t.Union(\n\tt.Object({\n\t\tstatusCode: t.Literal(1).withParser(LiteralConverterParserFactory(1, 'success' as const)),\n\t\tgasSpent: EthereumQuantity,\n\t\treturnValue: EthereumData,\n\t\tevents: MulticallResponseEventLogs,\n\t\tbalanceChanges: EthBalanceChanges,\n\t}).asReadonly(),\n\tt.Object({\n\t\tstatusCode: t.Literal(0).withParser(LiteralConverterParserFactory(0, 'failure' as const)),\n\t\tgasSpent: EthereumQuantity,\n\t\terror: t.String.withParser(RevertErrorParser),\n\t\treturnValue: EthereumData,\n\t}).asReadonly()\n)\n\nexport type GetSimulationStackReply = t.Static<typeof GetSimulationStackReply>\nexport const GetSimulationStackReply = t.ReadonlyArray(\n\tt.Intersect(\n\t\tEthereumUnsignedTransaction,\n\t\tSingleMulticallResponse,\n\t\tt.Object({\n\t\t\trealizedGasPrice: EthereumQuantity,\n\t\t\tgasLimit: EthereumQuantity,\n\t\t\tmaxPriorityFeePerGas: EthereumQuantity,\n\t\t\tbalanceChanges: EthBalanceChanges\n\t\t}).asReadonly()\n\t)\n)\n"]}