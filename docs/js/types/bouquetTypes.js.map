{"version":3,"file":"bouquetTypes.js","sourceRoot":"","sources":["../../ts/types/bouquetTypes.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,QAAQ,MAAM,UAAU,CAAA;AACpC,OAAO,EAAE,eAAe,EAAE,aAAa,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAA;AAGrF,MAAM,CAAC,MAAM,eAAe,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC;IACrE,IAAI,EAAE,QAAQ,CAAC,KAAK,CAAC,eAAe,EAAE,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAClE,EAAE,EAAE,QAAQ,CAAC,KAAK,CAAC,eAAe,EAAE,QAAQ,CAAC,IAAI,CAAC;IAClD,KAAK,EAAE,gBAAgB;IACvB,KAAK,EAAE,aAAa;IACpB,OAAO,EAAE,gBAAgB;IACzB,QAAQ,EAAE,gBAAgB;CAC1B,CAAC,CAAC,UAAU,EAAE,CAAC,CAAA;AAGhB,MAAM,CAAC,MAAM,wBAAwB,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC;IAC9E,IAAI,EAAE,eAAe;IACrB,EAAE,EAAE,QAAQ,CAAC,KAAK,CAAC,eAAe,EAAE,QAAQ,CAAC,IAAI,CAAC;IAClD,KAAK,EAAE,gBAAgB;IACvB,KAAK,EAAE,aAAa;IACpB,OAAO,EAAE,gBAAgB;IACzB,QAAQ,EAAE,gBAAgB;IAC1B,KAAK,EAAE,gBAAgB;IACvB,YAAY,EAAE,gBAAgB;IAC9B,oBAAoB,EAAE,gBAAgB;CACtC,CAAC,CAAC,UAAU,EAAE,CAAC,CAAA;AAGhB,MAAM,CAAC,MAAM,cAAc,GAAG,QAAQ,CAAC,MAAM,CAAC;IAC7C,OAAO,EAAE,gBAAgB;IACzB,WAAW,EAAE,QAAQ,CAAC,MAAM;IAC5B,SAAS,EAAE,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACjF,wBAAwB,EAAE,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,SAAS,CAAC;IAC7E,4BAA4B,EAAE,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,SAAS,CAAC;IACjF,cAAc,EAAE,gBAAgB;IAChC,WAAW,EAAE,gBAAgB;IAC7B,gBAAgB,EAAE,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,SAAS,CAAC;IACrE,aAAa,EAAE,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,SAAS,CAAC;IAClE,uBAAuB,EAAE,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,SAAS,CAAC;IAC5E,uBAAuB,EAAE,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,SAAS,CAAC;CAC5E,CAAC,CAAA;AAGF,MAAM,CAAC,MAAM,eAAe,GAAG,QAAQ,CAAC,aAAa,CAAC,cAAc,CAAC,CAAA","sourcesContent":["import * as funtypes from 'funtypes'\nimport { EthereumAddress, EthereumInput, EthereumQuantity } from './ethereumTypes.js'\n\nexport type TransactionList = funtypes.Static<typeof TransactionList>\nexport const TransactionList = funtypes.ReadonlyArray(funtypes.Object({\n\tfrom: funtypes.Union(EthereumAddress, funtypes.Literal('FUNDING')),\n\tto: funtypes.Union(EthereumAddress, funtypes.Null),\n\tvalue: EthereumQuantity,\n\tinput: EthereumInput,\n\tchainId: EthereumQuantity,\n\tgasLimit: EthereumQuantity\n}).asReadonly())\n\nexport type PopulatedTransactionList = funtypes.Static<typeof PopulatedTransactionList>\nexport const PopulatedTransactionList = funtypes.ReadonlyArray(funtypes.Object({\n\tfrom: EthereumAddress,\n\tto: funtypes.Union(EthereumAddress, funtypes.Null),\n\tvalue: EthereumQuantity,\n\tinput: EthereumInput,\n\tchainId: EthereumQuantity,\n\tgasLimit: EthereumQuantity,\n\tnonce: EthereumQuantity,\n\tmaxFeePerGas: EthereumQuantity,\n\tmaxPriorityFeePerGas: EthereumQuantity\n}).asReadonly())\n\nexport type BouquetNetwork = funtypes.Static<typeof BouquetNetwork>\nexport const BouquetNetwork = funtypes.Object({\n\tchainId: EthereumQuantity,\n\tnetworkName: funtypes.String,\n\trelayMode: funtypes.Union(funtypes.Literal('relay'), funtypes.Literal('mempool')),\n\tmempoolSubmitRpcEndpoint: funtypes.Union(funtypes.String, funtypes.Undefined),\n\tmempoolSimulationRpcEndpoint: funtypes.Union(funtypes.String, funtypes.Undefined),\n\tblocksInFuture: EthereumQuantity,\n\tpriorityFee: EthereumQuantity,\n\tblockExplorerApi: funtypes.Union(funtypes.String, funtypes.Undefined),\n\tblockExplorer: funtypes.Union(funtypes.String, funtypes.Undefined),\n\tsimulationRelayEndpoint: funtypes.Union(funtypes.String, funtypes.Undefined),\n\tsubmissionRelayEndpoint: funtypes.Union(funtypes.String, funtypes.Undefined)\n})\n\nexport type BouquetSettings = funtypes.Static<typeof BouquetSettings>\nexport const BouquetSettings = funtypes.ReadonlyArray(BouquetNetwork)\n"]}